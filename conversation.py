from groq import Groq
import script
import os
import speech_recognition as sr
from gtts import gTTS
from playsound import playsound

def new_conversation():
    client = Groq(
        api_key=os.environ["API_KEY"],
    )
    
    messages = [
        {
            "role": "system",
            "content": """
            You are a personal voice assistant, and you need to have a conversation with the user. 
            The user will provide a text input generated by a speech-to-text system. 
            You must generate a text response that will be converted to speech by a text-to-speech system. 
            The response must be a natural language response that is coherent with the input. 
            Ensure you answer in the same language as the user. 
            If a better response can be achieved using a Python script, simply say [PYTHON]. 
            For instance, a Python script will provide a better response for a math problem. 
            Do not hesitate to use this option by saying [PYTHON], as it will often be more effective.
            Python scripts are often more powerful on dynamic tasks, such as calculations, data processing, or data analysis.
            On all tasks that require calculation say [PYTHON].
            Additionally, avoid providing responses with unfilled placeholders such as [NAME] or [DATE].
            
            """,
        },
    ]
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        while True:
            audio = recognizer.listen(source, timeout=10)
            user = ""
            try:
                user = recognizer.recognize_google(audio, language='en-US')
                print("You said : {}".format(user))
            except:
                print("Sorry could not recognize what you said")
            if user == "":
                continue
            messages.append({
                "role": "user",
                "content": user,
            })
            
            chat_completion = client.chat.completions.create(
                messages=messages,
                model="mixtral-8x7b-32768",
            )
            answer = chat_completion.choices[0].message.content
            if "[PYTHON]" in answer or "```python" in answer:
                solution, code = script.solve(user)
                answer = script.present_solution(user, solution, code)
            
            messages.append({
                "role": "assistant",
                "content": answer,
            })
            language = 'en'

            speech = gTTS(text=answer, lang=language, slow=False)
            speech.save("text_to_speech.mp3")
            print("Assistant:", answer)

            playsound("text_to_speech.mp3")

    